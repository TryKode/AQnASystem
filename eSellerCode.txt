f'''import streamlit as st

import requests
import json
import re
from bs4 import BeautifulSoup as bs

def scrape_data(productURL):
    # Function to Scrape data 
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36", "Accept-Encoding":"gzip, deflate", "Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", "DNT":"1","Connection":"close", "Upgrade-Insecure-Requests":"1"}
    productPage = requests.get(productURL, headers=headers)
    productSoup = bs(productPage.content,'html.parser')
    
    # Product-Name
    productNames = productSoup.find_all('span', id='productTitle')
    if len(productNames) > 0:
        productNames = productNames[0].get_text().strip()
        #print('.>>> ', productNames)
    
    # Offer-Price
    ids = ['priceblock_dealprice', 'priceblock_ourprice', 'tp_price_block_total_price_ww']
    for ID in ids:
        productDiscountPrice = productSoup.find_all('span', id=ID)
        if len(productDiscountPrice) > 0 :
            productDiscountPrice = productDiscountPrice[0].get_text().strip().split('.')[0]
            productDiscountPrice = productDiscountPrice +'.00'
            break
    #print('.>>> ', productDiscountPrice)
    
    # MRP-Price
    classes = ['priceBlockStrikePriceString', 'a-text-price']
    for CLASS in classes:
        productActualPrice = productSoup.find_all('span', class_=CLASS)
        if len(productActualPrice) > 0 :
            productActualPrice = productActualPrice[0].get_text().strip().split('.')[0]
            productActualPrice = productActualPrice + '.00'
            break
    #print('.>>> ', productActualPrice)
    
    # Product-IMGs
    productImg = productSoup.find_all('img', id="landingImage")
    if len(productImg) > 0:
        productImg = productImg[0]['data-a-dynamic-image']
        productImg = json.loads(productImg)
        #print('.>>> ', productImg)
    
    # Product-Rating
    productRating = productSoup.find_all('span', class_="a-icon-alt")
    if len(productRating) > 0:
        productRating = productRating[0].get_text().strip()
        #print('.>>> ', productRating)

    # Product-Stars
    productStars = productSoup.find_all('table', id="histogramTable")
    if len(productStars) > 0:
        productStars = productStars[0].get_text().replace('\n', '').split('%')
        temp = []
        for i in range(len(productStars)-1):
            temp.append(float(productStars[i][-2:]))
        productStars = temp
        #productStars
    
    # Product-Features
    productFeatures = productSoup.find_all('div', id='feature-bullets')
    if len(productFeatures) > 0:
        productFeatures = productFeatures[0].get_text().strip()
        productFeatures = re.split('\n|  ',productFeatures)
        temp = []
        for i in range(len(productFeatures)):
            if productFeatures[i]!='' and productFeatures[i]!=' ' :
                temp.append( productFeatures[i].strip() )
        productFeatures = temp
        #print('.>>> ', productFeatures)
    
    # Product-Specs
    ids = { 'productDetails_techSpec_section_1' : 'table', 'detailBullets_feature_div' : 'div' }
    for key, value in ids.items():
        productSpecs = productSoup.find_all(value, id=key)
        if len(productSpecs) > 0:
            productSpecs = productSpecs[0].get_text().strip()
            productSpecs = re.split('\n|\u200e|  ',productSpecs) 
            temp = []
            for i in range(len(productSpecs)):
                if productSpecs[i]!='' and productSpecs[i]!=' ' :
                    temp.append( productSpecs[i].strip() )
            productSpecs = temp
            break
    #print('.>>> ', productSpecs)
    
    # Product-Details
    ids = { 'productDetails_db_sections' : 'div' }
    for key, value in ids.items():
        productDetails = productSoup.find_all(value, id=key)
        if len(productDetails) > 0:
            productDetails = productDetails[0].get_text()
            productDetails = re.split('\n|  ',productDetails) 
            temp = []
            for i in range(len(productDetails)):
                if productDetails[i]!='' and productDetails[i]!=' ' :
                    temp.append( productDetails[i].strip() )
            productDetails = temp
            break
    #print('.>>> ', productDetails)
    
    #context1 = productNames + '.\n' + 'M.R.P. : ' + productActualPrice + '. Offer Price : ' + productDiscountPrice # + '. Rating : ' + productRating + '.\n'
    context1 = ''
    for i in range(1, len(productFeatures)-1):
        context1 = context1 + 'Product has ' + productFeatures[i].replace(' | ', ', ') + '. '
    #print('.>>> ', context1)    
    
    context2 = ''
    for i in range(0, len(productSpecs), 2):
        context2 = context2 + productSpecs[i] + ' is ' + productSpecs[i+1] + '. '
    #print('.>>> ', context2)
    
    details = {
        'product_data' : {
            'productNames' : productNames,
            'productDiscountPrice' : productDiscountPrice,
            'productActualPrice' : productActualPrice,
            'productRating' : productRating,
            'productStars' : productStars,
            'productImg' : productImg,
            'productFeatures' : productFeatures,
            'productSpecs' : productSpecs,
            'productDetails' : productDetails,
            'context1' : context1, 
            'context2' : context2 
        }
    }
    return details

def getList(dict):
    list = []
    for key in dict.keys():
        list.append(key)
    return list

### Code
st.set_page_config(layout='wide')
st.markdown("""
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
""", unsafe_allow_html=True)
st.markdown("""
<nav class="navbar fixed-top navbar-expand-lg navbar-dark" style="background-color: #212121;">
  <a class="navbar-brand" href="https://www.amazon.in/" target="_blank"><b>eSeller</b></a>
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>
</nav>

<style>
#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
</style>
""", unsafe_allow_html=True)

#st.title('eSeller')

# Code
productURL = ''
productName = ''
productID = ''

webPageSideBar = st.sidebar
webPageSideBar.markdown(f'''<h3><b>Ecommerce Websites</b></h3>''', unsafe_allow_html=True)
amazon = webPageSideBar.checkbox('Amazon')
flipkart = webPageSideBar.checkbox('Flipkart')
productURL_Box = webPageSideBar.empty()

webPageSideBar.markdown(f'''<h3><b>Code</b></h3>''', unsafe_allow_html=True)
code = webPageSideBar.checkbox('See Code Here')

if amazon :
    productURL = productURL_Box.text_input('', placeholder="Enter Product Link here")

if code :
    st.code('codeForESeller', language='python')

if(productURL != ''):
    data = scrape_data(productURL)
    col0, col1 = st.columns([30, 70])
    ## Col 0
    with col0:
        #st.write('‏‏‎ ‎')
        imgURL = list(data['product_data']['productImg'].keys())
        st.markdown(f'''<img src={imgURL[0]} alt="product" width="100%" height="100%" style="display: flex; flex-direction:row; justify-content: space-evenly;">
                        <h6>   </h6>
                        <figcaption style="text-align: center;">{data['product_data']['productNames']}</figcaption>''', unsafe_allow_html=True)

    ## Col 1
    with col1:
        product_title = data['product_data']['productNames'].split( '(' )
        MRP = float(re.sub('\D', '', data['product_data']['productActualPrice'][:-2]))
        OfferPrice = float(re.sub('\D', '', data['product_data']['productDiscountPrice'][:-2]))
        UP = sum(data['product_data']['productStars'][0:3])
        DOWN = sum(data['product_data']['productStars'][3:])

        rating = float(data['product_data']['productRating'][0:3])
        ratingHelper = None
        if rating>=0.5 and rating<1.5 :    
            ratingHelper = '<span class="fa fa-star checked"></span>'
        elif rating>=1.5 and rating<2.5 :    
            ratingHelper = '<span class="fa fa-star checked"></span> <span class="fa fa-star checked"></span>'
        elif rating>=2.5 and rating<3.5 :    
            ratingHelper = '<span class="fa fa-star checked"></span> <span class="fa fa-star checked"></span> <span class="fa fa-star checked"></span>'
        elif rating>=3.5 and rating<4.5 :
            ratingHelper = '<span class="fa fa-star checked"></span> <span class="fa fa-star checked"></span> <span class="fa fa-star checked"></span> <span class="fa fa-star checked"></span>'
        else:
            ratingHelper = '<span class="fa fa-star checked"></span> <span class="fa fa-star checked"></span> <span class="fa fa-star checked"></span> <span class="fa fa-star checked"></span> <span class="fa fa-star checked"></span>'

        st.markdown( f'<h3 style="color:#F7CA00;"> <b>{product_title[0]}</b> </h3>', unsafe_allow_html=True)
        if len(product_title) > 1:
            st.markdown( f'<h5 style="color:#ffffff;"> {"("+product_title[1]} </h5>', unsafe_allow_html=True)
            
        st.markdown(f'''
        <div style="display: flex; flex-direction:row; justify-content: space-evenly;">
            <div class="card bg-dark text-white" style="width: 18rem;">
                <div class="card-body">
                    <h4 class="card-subtitle" style="display: flex; flex-direction:row; justify-content: space-evenly; color:#00C896;"><b>{data['product_data']['productDiscountPrice']}</b></h4>
                    <h4 class="card-subtitle" style="display: flex; flex-direction:row; justify-content: space-evenly; color:#B33F40;"><del>{data['product_data']['productActualPrice']}</del> <b style="color:#00C896;">🡇 {round((MRP-OfferPrice)*100/MRP, 1)}%</b> </h4>
                    <h5 class="card-subtitle" style="display: flex; flex-direction:row; justify-content: space-evenly; color:#F7CA00"><b>Price</b></h5>
                </div>
            </div>
            <div class="card bg-dark text-white" style="width: 18rem;">
                <div class="card-body">
                    <h4 class="card-subtitle" style="display: flex; flex-direction:row; justify-content: space-evenly; color:#B33F40;"> <b style="color:#00C896;">🡅 {UP}%</b>  <b style="color:#B33F40;">🡇 {100-UP}%</b> </h4>
                    <h4 class="card-subtitle" style="display: flex; flex-direction:row; justify-content: space-evenly; color:#FFA41C;"> {ratingHelper} </h4>
                    <h5 class="card-subtitle" style="display: flex; flex-direction:row; justify-content: space-evenly; color:#F7CA00"><b>Rating</b></h5>
                </div>
            </div>
        </div>''', unsafe_allow_html=True)
            
        question = st.text_input('', placeholder="Ask Anything ")
        if question != '':    
            st.success(question)
else:
    st.markdown(f'''
        <div style="display: flex; flex-direction:row; justify-content: space-evenly;">
            <div class="card bg-dark text-white" style="width: 75rem;">
                <div class="card-body">
                    <h4 class="card-subtitle" style="display: flex; flex-direction:row; justify-content: space-evenly; color:#FFFFFF;"><b>Welcome to <span style="color:#F7CA00;">eSeller</span></b></h4>
                    <h5 class="card-subtitle" style="display: flex; flex-direction:row; justify-content: space-evenly; color:#FFFFFF;"><b>This <span style="color:#F7CA00;">short tutorial</span> will walk you through all of the features of this application.</b></h5>                    
                    <div style="padding:15px;">
                        <img src="https://github.com/TryKode/AQnASystem/blob/main/eSeller.png?raw=true" alt="eSeller" width="100%" height="100%"></img>
                        <h5 class="card-subtitle" style="display: flex; flex-direction:row; justify-content: space-evenly; color:#FFFFFF; position:absolute; top:33%; left:35%; width:325px;"><b>Select a <span style="color:#F7CA00;">Ecommerce Website</span> and put the <span style="color:#F7CA00;">Product Link</span> here.</b></h5>
                    </div>
                    <div style="padding:15px;">
                        <img src="https://github.com/TryKode/AQnASystem/blob/main/eSeller1.png?raw=true" alt="eSeller" width="100%" height="100%"></img>
                        <h5 class="card-subtitle" style="display: flex; flex-direction:row; justify-content: space-evenly; color:#FFFFFF; position:absolute; top:89.5%; left:70%; width:300px;"><b>Verify the Product and <span style="color:#F7CA00;">Ask Any Product related question here</span>.</b></h5>
                    </div>
                </div>
            </div>
        </div>''', unsafe_allow_html=True)'''